apiVersion: batch/v1
kind: Job
metadata:
  name: postgres-init-data
  namespace: postgres
spec:
  template:
    spec:
      restartPolicy: Never
      containers:
      - name: postgres-init
        image: postgres:17.5
        env:
        - name: PGHOST
          value: "postgres-cluster-rw"
        - name: PGPORT
          value: "5432"
        - name: PGDATABASE
          value: "homelab"
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: username
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: password
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h $PGHOST -p $PGPORT -U $PGUSER; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
          echo "PostgreSQL is ready!"
          
          echo "Creating tables and inserting dummy data..."
          psql -v ON_ERROR_STOP=1 <<-EOSQL
            -- Create employees table
            CREATE TABLE IF NOT EXISTS employees (
                id SERIAL PRIMARY KEY,
                first_name VARCHAR(50) NOT NULL,
                last_name VARCHAR(50) NOT NULL,
                email VARCHAR(100) UNIQUE NOT NULL,
                department VARCHAR(50),
                salary INTEGER,
                hire_date DATE DEFAULT CURRENT_DATE,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            
            -- Create departments table
            CREATE TABLE IF NOT EXISTS departments (
                id SERIAL PRIMARY KEY,
                name VARCHAR(50) UNIQUE NOT NULL,
                description TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            );
            
            -- Insert sample departments
            INSERT INTO departments (name, description) VALUES
                ('Engineering', 'Software development and technical operations'),
                ('Sales', 'Customer acquisition and revenue generation'),
                ('Marketing', 'Brand promotion and market analysis'),
                ('HR', 'Human resources and employee management'),
                ('Finance', 'Financial planning and accounting')
            ON CONFLICT (name) DO NOTHING;
            
            -- Insert sample employees
            INSERT INTO employees (first_name, last_name, email, department, salary, hire_date) VALUES
                ('John', 'Doe', 'john.doe@homelab.local', 'Engineering', 85000, '2023-01-15'),
                ('Jane', 'Smith', 'jane.smith@homelab.local', 'Engineering', 90000, '2023-02-20'),
                ('Mike', 'Johnson', 'mike.johnson@homelab.local', 'Sales', 75000, '2023-03-10'),
                ('Sarah', 'Williams', 'sarah.williams@homelab.local', 'Marketing', 70000, '2023-04-05'),
                ('David', 'Brown', 'david.brown@homelab.local', 'HR', 65000, '2023-05-12'),
                ('Lisa', 'Davis', 'lisa.davis@homelab.local', 'Finance', 80000, '2023-06-18'),
                ('Tom', 'Wilson', 'tom.wilson@homelab.local', 'Engineering', 95000, '2023-07-22'),
                ('Amy', 'Taylor', 'amy.taylor@homelab.local', 'Sales', 78000, '2023-08-30'),
                ('Chris', 'Anderson', 'chris.anderson@homelab.local', 'Marketing', 72000, '2023-09-15'),
                ('Jennifer', 'Thomas', 'jennifer.thomas@homelab.local', 'HR', 68000, '2023-10-01')
            ON CONFLICT (email) DO NOTHING;
            
            -- Verify data insertion
            SELECT 'Departments created:' as status, COUNT(*) as count FROM departments;
            SELECT 'Employees created:' as status, COUNT(*) as count FROM employees;
          EOSQL
          
          echo "Database initialization completed successfully!"